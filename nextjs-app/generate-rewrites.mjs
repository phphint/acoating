import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const publicDirPath = path.join(__dirname, 'public');

async function generateRewrites(directory = publicDirPath, prefix = '') {
  const entries = await fs.readdir(directory, { withFileTypes: true });
  let htmlFiles = [];

  for (const entry of entries) {
    const entryPath = path.join(directory, entry.name);
    if (entry.isDirectory()) {
      // Recursively read subdirectories
      htmlFiles = htmlFiles.concat(await generateRewrites(entryPath, prefix + entry.name + '/'));
    } else if (entry.isFile() && entry.name.endsWith('.html') && !entry.name.includes('?')) {
      htmlFiles.push(prefix + entry.name);
    }
  }

  if (directory === publicDirPath) {
    const rewrites = htmlFiles.map(file => ({
      source: `/${file.replace('.html', '')}`,
      destination: `/${file}`,
    }));

    const nextConfigContent = `
// This file was auto-generated by generate-rewrites.mjs. Do not edit manually.
export default {
  async rewrites() {
    return ${JSON.stringify(rewrites, null, 2)};
  },
};
`;

    await fs.writeFile(path.join(__dirname, 'next.config.mjs'), nextConfigContent);
    console.log('Rewrites generated in next.config.mjs');
  }

  return htmlFiles;
}

generateRewrites().catch(console.error);
